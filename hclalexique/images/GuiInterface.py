#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Thu Sep 17 12:08:08 2009 from "/home/assem/myProjet/qutrub-0.5/wxWidGet/wxqurub.wxg"

import wx
import wx.grid
import wx.html






# begin wxGlade: extracode
from mosaref_main import *
import codecs
Extention={"TXT":"text (*.txt)|*.txt","XML":"xml files (*.xml)|*.xml","HTML":"html pages (*.html)|*.html","CSV":"csv files (*.csv)|*.csv","TEX":"tex files (*.tex)|*.tex"}
# end wxGlade



class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_EXIT, _(u"خروج"), _(u"الخروج من البرنامج"), wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, _(u"ملف"))
        wxglade_tmp_menu = wx.Menu()
        ID_WHO_QUTRUB,ID_ABOUT_GUI=wx.NewId(),wx.NewId()
        wxglade_tmp_menu.Append(wx.ID_HELP, _(u"مساعدة"), _(u"مساعدة حول طريقة الاستعمال و الأخطاء المحتملة"), wx.ITEM_NORMAL)
        #wxglade_tmp_menu.Append(ID_WHO_QUTRUB, _(u"من هو قطرب؟"), _(u" سيرة موجزة عن الملقب بالقطرب"), wx.ITEM_NORMAL)
        #wxglade_tmp_menu.Append(wx.ID_ABOUT, _(u"حول البرنامج.."), _(u"معلومات حول برنامج التصريف قطرب 0.5"), wx.ITEM_NORMAL)
        #wxglade_tmp_menu.Append(ID_ABOUT_GUI, _(u"حول الواجهة.."), _(u"معلومات حول الواجهة المرئية"), wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, _(u"مساعدة"))
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(2, 0)
        self.bitmap_1 = wx.StaticBitmap(self, -1, wx.Bitmap("./images/logo.jpg", wx.BITMAP_TYPE_ANY))
        self.label_1 = wx.StaticText(self, -1, _(u"تصريف الأفعال العربية"), style=wx.ALIGN_CENTRE)
        self.button_1 = wx.Button(self, -1, _(u"صرّف الفعل"))
        self.word = wx.TextCtrl(self, -1, "فعل")
        self.label_3_copy = wx.StaticText(self, -1, _(u"الفعل:"), style=wx.ALIGN_RIGHT)
        self.label_2 = wx.StaticText(self, -1, _(u"للفعل الثلاثي فقط"))
        self.future_type = wx.ComboBox(self, -1, choices=[_(u"فتحة"), _(u"ضمة"), _(u"كسرة"), _(u"سكون")], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_3 = wx.StaticText(self, -1, _(u"حركة عين المضارع:"), style=wx.ALIGN_RIGHT)
        self.all = wx.CheckBox(self, -1, _(u"كل الأزمنة"))
        self.past = wx.CheckBox(self, -1, _(u"الماضي"))
        self.future = wx.CheckBox(self, -1, _(u"المضارع"))
        self.passive = wx.CheckBox(self, -1, _(u"المبني للمجهول"))
        self.imperative = wx.CheckBox(self, -1, _(u"الأمر "))
        self.label_3_copy_1 = wx.StaticText(self, -1, _(u"زمن التصريف:"), style=wx.ALIGN_RIGHT)
        self.transitive = wx.RadioBox(self, -1, "", choices=[_(u"لازم"), _(u"متعدي")], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.label_3_copy_1_copy = wx.StaticText(self, -1, _(u"التعدية:"), style=wx.ALIGN_RIGHT)
        self.display_format = wx.ComboBox(self, -1, choices=[_("GUI"),_("TXT"),_("HTML"), _("XML"), _("CSV"),  _("TEX")], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_4 = wx.StaticText(self, -1, _(u"نمط المخرجات: "))
        self.save_file = wx.CheckBox(self, -1, _(u"حفظ كملف"))
        self.colored = wx.CheckBox(self, -1, _(u"إظهار التشكيل بلون مختلف "))
        self.label_4_copy = wx.StaticText(self, -1, _(u"خيارات:"))
        self.text_results = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY| wx.TE_RICH|wx.TE_LINEWRAP)
        self.results = wx.grid.Grid(self, -1, size=(1, 1))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.exitHandler, id=wx.ID_EXIT)
        self.Bind(wx.EVT_CLOSE, self.onCloseWindow)
        self.Bind(wx.EVT_MENU, self.helpHandler, id=wx.ID_HELP)
        self.Bind(wx.EVT_MENU, self.whosqutrubHandler, id=ID_WHO_QUTRUB)
        self.Bind(wx.EVT_MENU, self.aboutprogramHandler, id=wx.ID_ABOUT)
        self.Bind(wx.EVT_MENU, self.aboutinterfaceHandler, id=ID_ABOUT_GUI)
        self.Bind(wx.EVT_BUTTON, self.DOSARFHANDLER, self.button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle(_(u"قطرب 0.5"))
        self.SetMinSize((740,350))
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("./images/logo.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((705, 660))
        #self.SetToolTipString(_(u"قطرب 0.5"))
        self.frame_1_statusbar.SetStatusWidths([-1, 130])
        # statusbar fields
        frame_1_statusbar_fields = [_(u"الشرح"), _(u"الفعل الحالي")]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.label_1.SetForegroundColour(wx.Colour(50, 50, 204))
        self.label_1.SetFont(wx.Font(17, wx.MODERN, wx.NORMAL, wx.NORMAL, 1, ""))
        self.button_1.SetForegroundColour(wx.Colour(255, 0, 0))
        self.word.SetMinSize((100, 32))
        self.button_1.SetToolTipString(_(u"انقر هنا لبدء التصريف و عرض النتائج "))
        self.word.SetToolTipString(_(u"اكتب الفعل هنا "))
        self.label_3_copy.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.future_type.SetSelection(0)
        self.future_type.SetToolTipString(_(u"عيّن حركة العين في مضارع هذا الفعل"))
        self.all.SetValue(1)
        self.transitive.SetMinSize((122, 30))
        self.transitive.SetSelection(1)
        self.transitive.SetToolTipString(_(u"عيّن ان كان الفعل متعدّيا ام لازما"))
        self.display_format.SetSelection(0)
        self.display_format.SetToolTipString(_(u"نمط النتائج"))
        self.text_results.SetMinSize((300,300))
        self.text_results.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.text_results.Hide()
        self.text_results.SetToolTipString(_(u"هنا تعرض النتائج في حالة عدم الحفظ كملف"))
        self.results.CreateGrid(14,6)
        self.results.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.results.Hide()
        self.results.EnableEditing(0)
        self.results.SetColLabelValue(0, _(u"الضمائر"))
        self.results.SetColSize(0, 60)
        self.results.SetColLabelValue(1, _(u"الماضي المعلوم"))
        self.results.SetColSize(1, 130)
        self.results.SetColLabelValue(2, _(u"الماضي المجهول"))
        self.results.SetColSize(2, 130)
        self.results.SetColLabelValue(3, _(u"المضارع المعلوم"))
        self.results.SetColSize(3, 130)
        self.results.SetColLabelValue(4, _(u"المضارع المجهول"))
        self.results.SetColSize(4, 130)
        self.results.SetColLabelValue(5, _(u"الأمر"))
        self.results.SetColSize(5, 130)
        self.results.SetColLabelValue(6, _(u"⋅"))
        self.results.SetToolTipString(_(u"جدول تصريف الفعل"))
        self.colored.SetToolTipString(_(u"عين اذا كنت تريد تمييز التشكيل(هذا الخيار متوفر فقط في نمط الاخراج HTML)"))
        self.save_file.SetToolTipString(_(u"حفظ النتائج كملف مباشرة"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.bitmap_1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(self.label_1, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_8.Add((20, 30), 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.button_1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.word, 0, wx.ALIGN_RIGHT, 0)
        sizer_12.Add((80, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add(self.label_3_copy, 0, wx.ADJUST_MINSIZE, 0)
        sizer_12.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(sizer_12, 1, wx.ALIGN_RIGHT, 0)
        sizer_13.Add(self.label_2, 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add(self.future_type, 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add(self.label_3, 0, wx.ADJUST_MINSIZE, 0)
        sizer_13.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(sizer_13, 0, wx.ALIGN_RIGHT, 0)
        sizer_8.Add((10, 10), 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(self.all, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(self.past, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(self.future, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(self.passive, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(self.imperative, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add((50, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add(self.label_3_copy_1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_11.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(sizer_11, 1, wx.ALIGN_RIGHT, 0)
        sizer_9.Add(self.transitive, 0, 0, 0)
        sizer_9.Add((90, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_9.Add(self.label_3_copy_1_copy, 0, wx.ADJUST_MINSIZE, 0)
        sizer_9.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(sizer_9, 1, wx.ALIGN_RIGHT, 1)
        sizer_8.Add((20, 15), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.display_format, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add((35, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add(self.label_4, 0, wx.ADJUST_MINSIZE, 0)
        sizer_14.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(sizer_14, 1, wx.ALIGN_RIGHT, 0)
        sizer_4.Add(self.save_file, 0, wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.colored, 0, wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        sizer_4.Add((82, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add(self.label_4_copy, 0, wx.ADJUST_MINSIZE, 0)
        sizer_4.Add((34, 20), 0, wx.ADJUST_MINSIZE, 0)
        sizer_8.Add(sizer_4, 1, wx.ALIGN_RIGHT, 0)
        sizer_3.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 1)
        sizer_15.Add(self.text_results, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 1)
        sizer_15.Add(self.results, 1, wx.ALL|wx.EXPAND, 1)
        sizer_2.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        self.SetSize((720, 350))
        # end wxGlade

    def exitHandler(self, event): # wxGlade: MainFrame.<event_handler>
        self.Close(True)
        event.Skip()

    def helpHandler(self, event): # wxGlade: MainFrame.<event_handler>
        frame_2 = MyFrame(None, -1, "")
        Qutrub.SetTopWindow(frame_2)
        frame_2.Show()
        self.Hide()
        event.Skip()

    def whosqutrubHandler(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `whosqutrubHandler' not implemented!"
        event.Skip()

    def aboutprogramHandler(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `aboutprogramHandler' not implemented!"
        event.Skip()

    def aboutinterfaceHandler(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `aboutinterfaceHandler' not implemented!"
        event.Skip()

    def DOSARFHANDLER(self, event): # wxGlade: MainFrame.<event_handler>
        self.frame_1_statusbar.SetStatusText(u"الفعل: "+self.word.GetValue(),1)
        mode=self.display_format.GetValue()
        modeT=mode	
        if modeT=="HTML" and self.colored.GetValue():modeT="HTMLColoredDiacritics"
        rslt=do_sarf(self.word.GetValue(),self.future_type.GetValue(),self.all.GetValue(),self.past.GetValue(),self.future.GetValue(),self.passive.GetValue(),self.imperative.GetValue(),self.transitive.GetSelection(),modeT)
        if mode=="GUI":
			 max_col=len(rslt[0])
			 max_lin=len(rslt)
			 for z in range(max_col):
				 self.results.SetColLabelValue(z,rslt[0][z])
			 for z in range(max_col,6):
				 self.results.SetColLabelValue(z,u"-")
				 
			 for x in range(1,max_lin):
			 	for y in range(max_col):
			 		self.results.SetCellValue(x-1,y,rslt[x][y])
			 	for y in range(max_col,14):
			 		self.results.SetCellValue(x-1,y,u"")
			 self.results.Show()
			 self.text_results.Hide()
			 self.Layout()
        else :
              if self.save_file.GetValue():
              		FD=wx.FileDialog(self,message=u"حفظ كملف...", defaultDir=".", defaultFile=self.word.GetValue()+"."+mode.lower(), wildcard=Extention[mode], style=wx.SAVE) 
              		if FD.ShowModal() == wx.ID_OK:
              			path=FD.GetDirectory()+"/"+FD.GetFilename()
              			print path
              			temp=codecs.open(path,"w",  encoding="utf-8")
              			temp.write(rslt)
              			temp.close()
              else:
              		self.text_results.SetValue(rslt)
              		self.text_results.Show()
              		self.results.Hide()
              		self.Layout()  
        if not self.save_file.GetValue():
        	(w,h)=self.GetSize()
        	if (h<600):self.SetSize((w,750))
        	self.SetMinSize((740,600))
        event.Skip()
        
	
    def onCloseWindow(self, event):
	    # dialog to verify exit (including menuExit)
	    dlg = wx.MessageDialog(self, u"هل تود الخروج", u"خروج", wx.YES_NO | wx.ICON_QUESTION)
	    #
	    if dlg.ShowModal() == wx.ID_YES:
             dlg.Destroy()
			 #
             self.Destroy() #frame
			 #

# end of class MainFrame


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_5 = wx.StaticText(self, -1, _(u"المساعدة"), style=wx.ALIGN_CENTRE)
        self.label_5_copy = wx.StaticText(self, -1, _(u"   طريقة الاستعمال:\n"), style=wx.ALIGN_RIGHT)
        self.label_5_copy_1 = wx.StaticText(self, -1, _(u"   1.  اكتب الفعل مشكولا شكلا تاما (الحركات والشدة ) في خانة الفعل مثال : كَتَبَ، كَاتَبَ. \n   2. ملاحظة إذا كان الفعل مهموز الأول على وزن فاعل،مثل آخى يرجى كتابته على الشكل ءَاخَى.\n   3. إذا كان الفعل ثلاثيا حدد حركة عين الفعل في المضارع، مثلا كتب يكتُب تأخذ الحركة ضمة في المضارع.\n      إذا كان الفعل غير ثلاثي، تجاهل هذه الميزة.\n   4. حدد اللزوم والتعدي للفعل،\n   5. اختر الزمن الذي تريد التصريف فيه\n   6. اضغط على \"صرّف الفعل\".\n\n"))
        self.label_5_copy_copy = wx.StaticText(self, -1, _(u"   الأخطاء المحتملة:\n"), style=wx.ALIGN_RIGHT)
        self.label_5_copy_3 = wx.StaticText(self, -1, _(u"    *  قد تحتوي الكلمة على حرف غير عربي\n    * قد يكون عدد الحروف أقل من ثلاثة أحرف أو أكثر من سبعة.\n    * قد تحتوي على حرف غير مناسب : تنوين، أو تاء مربوطة، أو همزة تحت الألف.\n    * قد تحتوي على حرف في غير موضعه: حركة في البداية، أو ’ؤ’، ’ئ’ في أول الكلمة،أو ’ى’ ليست في الأخير.\n    * يرجى التأكد.\n\n"))

        self.__set_properties()
        self.__do_layout()


        self.Bind(wx.EVT_CLOSE, self.onCloseWindow)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_(u"المساعدة"))
        self.SetMinSize((660, 400))
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("./images/help.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.label_5.SetBackgroundColour(wx.Colour(255, 0, 0))
        self.label_5.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_5.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.BOLD, 1, ""))
        self.label_5_copy.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_5_copy_copy.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(self.label_5, 0, wx.EXPAND, 2)
        sizer_6.Add(self.label_5_copy, 0, wx.EXPAND, 0)
        sizer_6.Add(self.label_5_copy_1, 0, wx.EXPAND, 0)
        sizer_6.Add(self.label_5_copy_copy, 0, wx.EXPAND, 0)
        sizer_6.Add(self.label_5_copy_3, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        self.Layout()
        self.Centre()
	self.SetSize((660, 400))
        self.Layout()
        # end wxGlade

    def onCloseWindow(self, event): # wxGlade: MainFrame.<event_handler>
        frame_1 = MainFrame(None, -1, "")
        Qutrub.SetTopWindow(frame_1)
        self.Hide()        
        frame_1.Show()
        #event.Skip()

# end of class MyFrame


class Qutrub(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = MainFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class Qutrub

if __name__ == "__main__":
    import gettext
    gettext.install("Qutrub") # replace with the appropriate catalog name

    Qutrub = Qutrub(0)
    Qutrub.MainLoop()
